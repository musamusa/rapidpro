# Generated by Django 4.0.7 on 2022-10-14 18:41

from django.db import migrations
from django.utils import timezone

TYPE_INBOUND_CALL = "V"
TYPE_MISSED_CALL = "M"


def convert_missed_call_triggers(apps, schema_editor):
    Trigger = apps.get_model("triggers", "Trigger")

    num_ignored, num_converted, num_deleted = 0, 0, 0

    missed_call_triggers = (
        Trigger.objects.filter(trigger_type=TYPE_MISSED_CALL, is_active=True, is_archived=False)
        .select_related("org")
        .prefetch_related("groups")
    )

    print(f"Processsing {missed_call_triggers.count()} missed call triggers...")

    for missed in missed_call_triggers:
        # if org has an Android channel, leave missed call trigger as is, that's what they're for
        if missed.org.channels.filter(channel_type="A", is_active=True).exists():
            num_ignored += 1
            print(f" > ignored missed call trigger #{missed.id} as org has an Android channel")
            continue

        missed_group_ids = {g.id for g in missed.groups.all()}

        # if org has an incoming call trigger for the same groups, delete this trigger since it's not being called
        incoming_call_triggers = missed.org.triggers.filter(
            trigger_type=TYPE_INBOUND_CALL, is_active=True, is_archived=False
        )
        shadowed_by = None
        for incoming in incoming_call_triggers:
            incoming_group_ids = {g.id for g in incoming.groups.all()}
            if missed_group_ids == incoming_group_ids:
                shadowed_by = incoming
                break

        if shadowed_by:
            missed.is_active = False
            missed.modified_on = timezone.now()
            missed.save(update_fields=("is_active", "modified_on"))
            num_deleted += 1
            print(f" > deleted missed call trigger #{missed.id} which is shadowed by incoming call #{shadowed_by.id}")
            continue

        # if this missed call trigger doesn't conflict with an incoming call trigger, convert it to be one
        missed.trigger_type = TYPE_INBOUND_CALL
        missed.modified_on = timezone.now()
        missed.save(update_fields=("trigger_type", "modified_on"))
        print(f" > converted missed call trigger #{missed.id} to be an incoming call trigger")
        num_converted += 1

    print("Summary...")
    print(f" > Converted {num_converted} missed call triggers")
    print(f" > Deleted {num_deleted} unreachable ones")
    print(f" > Ignored {num_ignored} missed call triggers where org has an Android channel")


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("triggers", "0025_delete_bad_missed_calls"),
    ]

    operations = [migrations.RunPython(convert_missed_call_triggers, reverse)]
